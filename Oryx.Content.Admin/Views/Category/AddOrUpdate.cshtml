
@{
    /**/

    ViewData["Title"] = "添加类别";
}
@using System.Reflection;
@functions {
public string getVlue(PropertyInfo prop, object dataModel)
{
    if (dataModel != null)
    {
        return prop.GetValue(dataModel).ToString();
    }
    else
    {
        return "";
    }
}
public string getCheckBoxVlue(PropertyInfo prop, object dataModel)
{
    if (dataModel != null)
    {
        var value = prop.GetValue(dataModel).ToString();
        if (value == "True")
        {
            return "checked";
        }

    }
    return "";
}
}

@section styles{
    <style>
        .layui-upload-img {
            width: 92px;
            height: 92px;
            margin: 0 10px 10px 0;
        }
    </style>
}

@using (Html.BeginForm(FormMethod.Post, new { id = "mainForm", Class = "layui-form" }))
{
    var properties = (ViewData["DataType"] as Type).GetProperties();


    @foreach (var prop in properties)
    {
        <div class="form-group">
            @switch (prop.Name.ToLower())
            {
                case "id":
                    <input type="hidden" id="valId" name="@prop.Name" value="@getVlue(prop,ViewData["DataModel"])" />
                    break;
                case "mediaresource":
                    <div class="layui-form-item">
                        <label class="layui-form-label">封面图/预览图</label>
                        <div class="layui-input-block">
                            <div class="layui-upload">
                                <button type="button" class="layui-btn" id="test2">多图片上传</button>
                                <blockquote class="layui-elem-quote layui-quote-nm" style="margin-top: 10px;">
                                    预览图：
                                    <div class="layui-upload-list" id="demo2"></div>
                                </blockquote>
                            </div>
                        </div>
                    </div>

                    break;
                case "name":
                    <div class="layui-form-item">
                        <label class="layui-form-label">标题</label>
                        <div class="layui-input-block">
                            <input type="text" name="@prop.Name" required lay-verify="required" placeholder="" autocomplete="off" class="layui-input" value="@getVlue(prop,ViewData["DataModel"])">
                        </div>
                    </div>
                    break;
                case "description":
                    <div class="layui-form-item layui-form-text">
                        <label class="layui-form-label">内容</label>
                        <div class="layui-input-block">
                            <div id="editor1">
                                <p>欢迎使用 <b>wangEditor</b> 富文本编辑器</p>
                            </div>
                            <input type="hidden" id="editorValue" name="desc" value=" " />
                        </div>
                    </div>

                    break;

                case "parentcategory":
                    <div class="layui-form-item">
                        <label class="layui-form-label">父级</label>
                        <div class="layui-input-block">
                            <input type="text" id="parentCategory" class="layui-input" name="parentCategory" value=" " />
                            <div id="test12" class="demo-tree-more"></div>
                        </div>
                    </div>
                    break;
                case "tags":
                    <div class="layui-form-item">
                        <label class="layui-form-label">标签</label>
                        <div class="layui-input-block">
                            <input name="tags" value=''>
                        </div>
                    </div>
                    break;
                case "isshowtop":
                    <div class="layui-form-item">
                        <label class="layui-form-label">置顶</label>
                        <div class="layui-input-block">
                            <input type="checkbox" name="isShowTop" lay-skin="switch" lay-text="是|否">
                        </div>
                    </div>
                    break;
                case "fee":
                    <div class="layui-form-item">
                        <label class="layui-form-label">付费</label>
                        <div class="layui-input-block">
                            <input type="number" name="fee" placeholder="请输入标题" autocomplete="off" class="layui-input" style="width: 100px;">

                        </div>
                    </div>
                    break;
                default:
                    @*<label class="col-sm-2 control-label">@prop.Name</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" name="@prop.Name" value="" placeholder="@prop.Name">
                        </div>*@
                    break;
            }
        </div>
    }
    <div class="layui-form-item">
        <div class="layui-input-block">
            <button class="layui-btn layui-btn-primary" lay-filter="formDemo" onclick="javascript:history.go(-1);">回退</button>
            <button lay-submit class="layui-btn " lay-filter="btnSubmit">提交</button>
        </div>
    </div>
}
@*<form class="layui-form" action="" lay-filter="example">
        <div class="layui-form-item">
            <label class="layui-form-label">封面图片</label>
            <div class="layui-input-block">
                <div class="layui-upload">
                    <button type="button" class="layui-btn" id="test2">多图片上传</button>
                    <blockquote class="layui-elem-quote layui-quote-nm" style="margin-top: 10px;">
                        预览图：
                        <div class="layui-upload-list" id="demo2"></div>
                    </blockquote>
                </div>
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">输入框</label>
            <div class="layui-input-block">
                <input type="text" name="title" required lay-verify="required" placeholder="请输入标题" autocomplete="off" class="layui-input">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">密码框</label>
            <div class="layui-input-inline">
                <input type="password" name="password" required lay-verify="required" placeholder="请输入密码" autocomplete="off" class="layui-input">
            </div>
            <div class="layui-form-mid layui-word-aux">辅助文字</div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">选择框</label>
            <div class="layui-input-block">
                <select name="city" lay-verify="required">
                    <option value=""></option>
                    <option value="0">北京</option>
                    <option value="1">上海</option>
                    <option value="2">广州</option>
                    <option value="3">深圳</option>
                    <option value="4">杭州</option>
                </select>
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">复选框</label>
            <div class="layui-input-block">
                <input type="checkbox" name="like[write]" title="写作">
                <input type="checkbox" name="like[read]" title="阅读" checked>
                <input type="checkbox" name="like[dai]" title="发呆">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">开关</label>
            <div class="layui-input-block">
                <input type="checkbox" name="switch" lay-skin="switch">
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">文件</label>
            <div class="layui-input-block">
                <div class="layui-upload">
                    <button type="button" class="layui-btn layui-btn-normal" id="test8">选择文件</button>
                    <button type="button" class="layui-btn" id="test9">开始上传</button>
                </div>
                <fieldset class="layui-elem-field layui-field-title" style="margin-top: 30px;">
                    <legend>拖拽上传</legend>
                </fieldset>

                <div class="layui-upload-drag" id="test10">
                    <i class="layui-icon"></i>
                    <p>点击上传，或将文件拖拽到此处</p>
                </div>

            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">文件列表</label>
            <div class="layui-input-block">
                <fieldset class="layui-elem-field layui-field-title" style="margin-top: 30px;">
                    <legend>高级应用：制作一个多文件列表</legend>
                </fieldset>

                <div class="layui-upload">
                    <button type="button" class="layui-btn layui-btn-normal" id="testList">选择多文件</button>
                    <div class="layui-upload-list">
                        <table class="layui-table">
                            <thead>
                                <tr>
                                    <th>文件名</th>
                                    <th>大小</th>
                                    <th>状态</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody id="demoList"></tbody>
                        </table>
                    </div>
                    <button type="button" class="layui-btn" id="testListAction">开始上传</button>
                </div>
            </div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">单选框</label>
            <div class="layui-input-block">
                <input type="radio" name="sex" value="男" title="男">
                <input type="radio" name="sex" value="女" title="女" checked>
            </div>
        </div>
        <div class="layui-form-item layui-form-text">
            <label class="layui-form-label">文本域</label>
            <div class="layui-input-block">
                <div id="editor1">
                    <p>欢迎使用 <b>wangEditor</b> 富文本编辑器</p>
                </div>
                <input type="hidden" id="editorValue" name="desc" value=" " />
                 <textarea id="txtContent" name="desc" placeholder="请输入内容" class="layui-textarea"></textarea>
            </div>
        </div>
        <div class="layui-form-item">
            <div class="layui-input-block">
                <button class="layui-btn" lay-submit lay-filter="formDemo">立即提交</button>
                <button type="reset" class="layui-btn layui-btn-primary">重置</button>
            </div>
        </div>
    </form>*@

<div id="test" style="display:none;">
    thisi test content
</div>


@section scripts{
    <script>

        var ele = document.querySelector('input[name=tags]');
        var tagify = new Tagify(ele)

        layui.use(['form', 'layedit', 'laydate'], function () {
            var form = layui.form
                , layer = layui.layer
                , layedit = layui.layedit
                , laydate = layui.laydate;

            //日期
            laydate.render({
                elem: '#date'
            });
            laydate.render({
                elem: '#date1'
            });

            //创建一个编辑器
            var editIndex = layedit.build('LAY_demo_editor');

            //自定义验证规则
            form.verify({
                title: function (value) {
                    if (value.length < 5) {
                        return '标题至少得5个字符啊';
                    }
                }
                , pass: [
                    /^[\S]{6,12}$/
                    , '密码必须6到12位，且不能出现空格'
                ]
                , content: function (value) {
                    layedit.sync(editIndex);
                }
            });

            //监听指定开关
            form.on('switch(switchTest)', function (data) {
                layer.msg('开关checked：' + (this.checked ? 'true' : 'false'), {
                    offset: '6px'
                });
                layer.tips('温馨提示：请注意开关状态的文字可以随意定义，而不仅仅是ON|OFF', data.othis)
            });

            //监听提交
            form.on('submit(btnSubmit)', function (data) {
                var tags = [];
                var tmpTags = eval(data.field.tags);
                for (var index in tmpTags) {
                    var item = tmpTags[index];
                    tags.push({
                        name: item.value
                    })
                }
                data.field.tags = tags;
                $.ajax({
                    url: '/ContentEntry/AddCategory',
                    dataType: 'json',
                    type: 'post',
                    data: data.field,
                    success: function (res) {
                        if (res.success) {
                            layer.msg('删除成功!');
                        } else {
                            layer.msg('删除失败' + res.msg);
                        }
                        setTimeout(function () { window.location.reload(); }, 400);
                    }
                })
                return false;
            });

            //表单赋值
            layui.$('#LAY-component-form-setval').on('click', function () {
                form.val('example', {
                    "username": "贤心" // "name": "value"
                    , "password": "123456"
                    , "interest": 1
                    , "like[write]": true //复选框选中状态
                    , "close": true //开关状态
                    , "sex": "女"
                    , "desc": "我爱 layui"
                });

                //表单取值
                layui.$('#LAY-component-form-getval').on('click', function () {
                    var data = form.val('example');
                    alert(JSON.stringify(data));
                });
            });

            //表单取值
            layui.$('#LAY-component-form-getval').on('click', function () {
                var data = form.val('example');
                alert(JSON.stringify(data));
            });

        });
    </script>

    <script>
        //Demo
        //layui.use('form', function () {
        //    var form = layui.form;

        //    //监听提交
        //    form.on('submit(btnSubmit)', function (data) {
        //        layer.msg(JSON.stringify(data.field));
        //        return false;
        //    });
        //});

        layui.use('layer', function () {
            var layer = layui.layer;
            //eg2
            return;
            layer.open({
                title: "Modal",
                content: layui.$('#test').html()
                , btn: ['按钮一', '按钮二', '按钮三']
                , yes: function (index, layero) {
                    //按钮【按钮一】的回调
                }
                , btn2: function (index, layero) {
                    //按钮【按钮二】的回调

                    //return false 开启该代码可禁止点击该按钮关闭
                }
                , btn3: function (index, layero) {
                    //按钮【按钮三】的回调

                    //return false 开启该代码可禁止点击该按钮关闭
                }
                , cancel: function () {
                    //右上角关闭回调

                    //return false 开启该代码可禁止点击该按钮关闭
                }
            });

        });
        layui.use('upload', function () {
            var $ = layui.jquery
                , upload = layui.upload;

            //选完文件后不自动上传
            upload.render({
                elem: '#test8'
                , url: '/upload/'
                , auto: false
                //,multiple: true
                , bindAction: '#test9'
                , done: function (res) {
                    console.log(res)
                }
            });

            //拖拽上传
            upload.render({
                elem: '#test10'
                , url: '/upload/'
                , done: function (res) {
                    console.log(res)
                }
            });

            //多文件列表示例
            var demoListView = $('#demoList')
                , uploadListIns = upload.render({
                    elem: '#testList'
                    , url: '/upload/'
                    , accept: 'file'
                    , multiple: true
                    , auto: false
                    , bindAction: '#testListAction'
                    , choose: function (obj) {
                        var files = this.files = obj.pushFile(); //将每次选择的文件追加到文件队列
                        //读取本地文件
                        obj.preview(function (index, file, result) {
                            var tr = $(['<tr id="upload-' + index + '">'
                                , '<td>' + file.name + '</td>'
                                , '<td>' + (file.size / 1014).toFixed(1) + 'kb</td>'
                                , '<td>等待上传</td>'
                                , '<td>'
                                , '<button class="layui-btn layui-btn-xs demo-reload layui-hide">重传</button>'
                                , '<button class="layui-btn layui-btn-xs layui-btn-danger demo-delete">删除</button>'
                                , '</td>'
                                , '</tr>'].join(''));

                            //单个重传
                            tr.find('.demo-reload').on('click', function () {
                                obj.upload(index, file);
                            });

                            //删除
                            tr.find('.demo-delete').on('click', function () {
                                delete files[index]; //删除对应的文件
                                tr.remove();
                                uploadListIns.config.elem.next()[0].value = ''; //清空 input file 值，以免删除后出现同名文件不可选
                            });

                            demoListView.append(tr);
                        });
                    }
                    , done: function (res, index, upload) {
                        if (res.code == 0) { //上传成功
                            var tr = demoListView.find('tr#upload-' + index)
                                , tds = tr.children();
                            tds.eq(2).html('<span style="color: #5FB878;">上传成功</span>');
                            tds.eq(3).html(''); //清空操作
                            return delete this.files[index]; //删除文件队列已经上传成功的文件
                        }
                        this.error(index, upload);
                    }
                    , error: function (index, upload) {
                        var tr = demoListView.find('tr#upload-' + index)
                            , tds = tr.children();
                        tds.eq(2).html('<span style="color: #FF5722;">上传失败</span>');
                        tds.eq(3).find('.demo-reload').removeClass('layui-hide'); //显示重传
                    }
                });

        });

        //layui.use('layedit', function () {
        //    var layedit = layui.layedit;
        //    layedit.build('txtContent'); //建立编辑器
        //})


    </script>

    <script>
        var E = window.wangEditor
        var $text1 = $('#editorValue')

        var editor = new E('#editor1')
        editor.customConfig.menus = [
            'head',  // 标题
            'bold',  // 粗体
            'fontSize',  // 字号
            'fontName',  // 字体
            'italic',  // 斜体
            'underline',  // 下划线
            'strikeThrough',  // 删除线
            'foreColor',  // 文字颜色
            'backColor',  // 背景颜色
            'link',  // 插入链接
            'list',  // 列表
            'justify',  // 对齐方式
            'quote',  // 引用
            'emoticon',  // 表情
            'image',  // 插入图片
            'table',  // 表格
            //'video',  // 插入视频
            'code',  // 插入代码
            'undo',  // 撤销
            'redo'  // 重复
        ]
        editor.customConfig.uploadImgServer = '/pic/upload'  // 上传图片到服务器
        editor.customConfig.uploadImgMaxSize = 5 * 1024 * 1024 //图片大小限制
        editor.customConfig.uploadImgMaxLength = 5 //一次上传图片数量
        editor.customConfig.showLinkImg = false
        editor.customConfig.onchange = function (html) {
            // 监控变化，同步更新到 textarea
            $text1.val(html)
        }
        editor.customConfig.uploadImgHooks = {
            // 如果服务器端返回的不是 {errno:0, data: [...]} 这种格式，可使用该配置
            // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）
            customInsert: function (insertImg, result, editor) {
                // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）
                // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果

                // 举例：假如上传图片成功后，服务器端返回的是 {url:'....'} 这种格式，即可这样插入图片：
                //var url = result.url
                if (result.success) {
                    for (var i = 0; i < result.data.length; i++) {
                        var item = result.data[i];
                        insertImg(item.actualPath)
                    }
                }
                //insertImg(url)
                console.log(result)

                // result 必须是一个 JSON 格式字符串！！！否则报错
            }
        }
        editor.create()
        editor.txt.html($text1.val())
    </script>

    <script>
        layui.use(['tree', 'util'], function () {
            var tree = layui.tree
                , layer = layui.layer
                , util = layui.util

                //模拟数据
                , data = [{
                    title: '一级1'
                    , id: 1
                    , field: 'name1'
                    , checked: true
                    , spread: true
                    , children: [{
                        title: '二级1-1 可允许跳转'
                        , id: 3
                        , field: 'name11'
                        , href: 'https://www.layui.com/'
                        , children: [{
                            title: '三级1-1-3'
                            , id: 23
                            , field: ''
                            , children: [{
                                title: '四级1-1-3-1'
                                , id: 24
                                , field: ''
                                , children: [{
                                    title: '五级1-1-3-1-1'
                                    , id: 30
                                    , field: ''
                                }, {
                                    title: '五级1-1-3-1-2'
                                    , id: 31
                                    , field: ''
                                }]
                            }]
                        }, {
                            title: '三级1-1-1'
                            , id: 7
                            , field: ''
                            , children: [{
                                title: '四级1-1-1-1 可允许跳转'
                                , id: 15
                                , field: ''
                                , href: 'https://www.layui.com/doc/'
                            }]
                        }, {
                            title: '三级1-1-2'
                            , id: 8
                            , field: ''
                            , children: [{
                                title: '四级1-1-2-1'
                                , id: 32
                                , field: ''
                            }]
                        }]
                    }, {
                        title: '二级1-2'
                        , id: 4
                        , spread: true
                        , children: [{
                            title: '三级1-2-1'
                            , id: 9
                            , field: ''
                            , disabled: true
                        }, {
                            title: '三级1-2-2'
                            , id: 10
                            , field: ''
                        }]
                    }, {
                        title: '二级1-3'
                        , id: 20
                        , field: ''
                        , children: [{
                            title: '三级1-3-1'
                            , id: 21
                            , field: ''
                        }, {
                            title: '三级1-3-2'
                            , id: 22
                            , field: ''
                        }]
                    }]
                }, {
                    title: '一级2'
                    , id: 2
                    , field: ''
                    , spread: true
                    , children: [{
                        title: '二级2-1'
                        , id: 5
                        , field: ''
                        , spread: true
                        , children: [{
                            title: '三级2-1-1'
                            , id: 11
                            , field: ''
                        }, {
                            title: '三级2-1-2'
                            , id: 12
                            , field: ''
                        }]
                    }, {
                        title: '二级2-2'
                        , id: 6
                        , field: ''
                        , children: [{
                            title: '三级2-2-1'
                            , id: 13
                            , field: ''
                        }, {
                            title: '三级2-2-2'
                            , id: 14
                            , field: ''
                            , disabled: true
                        }]
                    }]
                }, {
                    title: '一级3'
                    , id: 16
                    , field: ''
                    , children: [{
                        title: '二级3-1'
                        , id: 17
                        , field: ''
                        , fixed: true
                        , children: [{
                            title: '三级3-1-1'
                            , id: 18
                            , field: ''
                        }, {
                            title: '三级3-1-2'
                            , id: 19
                            , field: ''
                        }]
                    }, {
                        title: '二级3-2'
                        , id: 27
                        , field: ''
                        , children: [{
                            title: '三级3-2-1'
                            , id: 28
                            , field: ''
                        }, {
                            title: '三级3-2-2'
                            , id: 29
                            , field: ''
                        }]
                    }]
                }]

                //模拟数据1
                , data1 = [{
                    title: '江西'
                    , id: 1
                    , children: [{
                        title: '南昌'
                        , id: 1000
                        , children: [{
                            title: '青山湖区'
                            , id: 10001
                        }, {
                            title: '高新区'
                            , id: 10002
                        }]
                    }, {
                        title: '九江'
                        , id: 1001
                    }, {
                        title: '赣州'
                        , id: 1002
                    }]
                }, {
                    title: '广西'
                    , id: 2
                    , children: [{
                        title: '南宁'
                        , id: 2000
                    }, {
                        title: '桂林'
                        , id: 2001
                    }]
                }, {
                    title: '陕西'
                    , id: 3
                    , children: [{
                        title: '西安'
                        , id: 3000
                    }, {
                        title: '延安'
                        , id: 3001
                    }]
                }]

                //模拟数据2
                , data2 = [{
                    title: '早餐'
                    , id: 1
                    , children: [{
                        title: '油条'
                        , id: 5
                    }, {
                        title: '包子'
                        , id: 6
                    }, {
                        title: '豆浆'
                        , id: 7
                    }]
                }, {
                    title: '午餐'
                    , id: 2
                    , checked: true
                    , children: [{
                        title: '藜蒿炒腊肉'
                        , id: 8
                    }, {
                        title: '西湖醋鱼'
                        , id: 9
                    }, {
                        title: '小白菜'
                        , id: 10
                    }, {
                        title: '海带排骨汤'
                        , id: 11
                    }]
                }, {
                    title: '晚餐'
                    , id: 3
                    , children: [{
                        title: '红烧肉'
                        , id: 12
                        , fixed: true
                    }, {
                        title: '番茄炒蛋'
                        , id: 13
                    }]
                }, {
                    title: '夜宵'
                    , id: 4
                    , children: [{
                        title: '小龙虾'
                        , id: 14
                        , checked: true
                    }, {
                        title: '香辣蟹'
                        , id: 15
                        , disabled: true
                    }, {
                        title: '烤鱿鱼'
                        , id: 16
                    }]
                }];

            //基本演示
            tree.render({
                elem: '#test12'
                , data: data
                , showCheckbox: false  //是否显示复选框
                , onlyIconControl: true
                , id: 'demoId1'
                , isJump: false //是否允许点击节点时弹出新窗口跳转
                , click: function (obj) {
                    var data = obj.data;  //获取当前点击的节点数据
                    //layer.msg('状态：' + obj.state + '<br>节点数据：' + JSON.stringify(data));
                    document.querySelector('#parentCategory').value = data.title;
                }
            });

            //按钮事件
            util.event('lay-demo', {
                getChecked: function (othis) {
                    var checkedData = tree.getChecked('demoId1'); //获取选中节点的数据

                    layer.alert(JSON.stringify(checkedData), { shade: 0 });
                    console.log(checkedData);
                }
                , setChecked: function () {
                    tree.setChecked('demoId1', [12, 16]); //勾选指定节点
                }
                , reload: function () {
                    //重载实例
                    tree.reload('demoId1', {

                    });

                }
            });

            //常规用法
            tree.render({
                elem: '#test1' //默认是点击节点可进行收缩
                , data: data1
            });

            //无连接线风格
            tree.render({
                elem: '#test13'
                , data: data1
                , showLine: false  //是否开启连接线
            });

            //仅节点左侧图标控制收缩
            tree.render({
                elem: '#test2Tree'
                , data: data1
                , onlyIconControl: true  //是否仅允许节点左侧图标控制展开收缩
                , click: function (obj) {
                    layer.msg(JSON.stringify(obj.data));
                }
            });
            //手风琴模式
            tree.render({
                elem: '#test4'
                , data: [{
                    title: '优秀'
                    , children: [{
                        title: '80 ~ 90'
                    }, {
                        title: '90 ~ 100'
                    }]
                }, {
                    title: '良好'
                    , children: [{
                        title: '70 ~ 80'
                    }, {
                        title: '60 ~ 70'
                    }]
                }, {
                    title: '要努力奥'
                    , children: [{
                        title: '0 ~ 60'
                    }]
                }]
                , accordion: true
            });

            //点击节点新窗口跳转
            tree.render({
                elem: '#test5'
                , data: data
                , isJump: true  //link 为参数匹配
            });

            //开启复选框
            tree.render({
                elem: '#test7'
                , data: data2
                , showCheckbox: true
            });

            //开启节点操作图标
            tree.render({
                elem: '#test9'
                , data: data1
                , edit: ['add', 'update', 'del'] //操作节点的图标
                , click: function (obj) {
                    layer.msg(JSON.stringify(obj.data));
                }
            });
        });
    </script>

    <script>
        layui.use('upload', function () {
            var $ = layui.jquery
                , upload = layui.upload;

            //普通图片上传
            var uploadInst = upload.render({
                elem: '#test1'
                , url: '/upload/'
                , before: function (obj) {
                    //预读本地文件示例，不支持ie8
                    obj.preview(function (index, file, result) {
                        $('#demo1').attr('src', result); //图片链接（base64）
                    });
                }
                , done: function (res) {
                    //如果上传失败
                    if (res.code > 0) {
                        return layer.msg('上传失败');
                    }
                    //上传成功
                }
                , error: function () {
                    //演示失败状态，并实现重传
                    var demoText = $('#demoText');
                    demoText.html('<span style="color: #FF5722;">上传失败</span> <a class="layui-btn layui-btn-xs demo-reload">重试</a>');
                    demoText.find('.demo-reload').on('click', function () {
                        uploadInst.upload();
                    });
                }
            });

            //多图片上传
            upload.render({
                elem: '#test2'
                , url: '/upload/'
                , multiple: true
                , before: function (obj) {
                    //预读本地文件示例，不支持ie8
                    obj.preview(function (index, file, result) {
                        $('#demo2').append('<img src="' + result + '" alt="' + file.name + '" class="layui-upload-img">')
                    });
                }
                , done: function (res) {
                    //上传完毕
                }
            });

            //指定允许上传的文件类型
            upload.render({
                elem: '#test3'
                , url: '/upload/'
                , accept: 'file' //普通文件
                , done: function (res) {
                    console.log(res)
                }
            });
            upload.render({ //允许上传的文件后缀
                elem: '#test4'
                , url: '/upload/'
                , accept: 'file' //普通文件
                , exts: 'zip|rar|7z' //只允许上传压缩文件
                , done: function (res) {
                    console.log(res)
                }
            });
            upload.render({
                elem: '#test5'
                , url: '/upload/'
                , accept: 'video' //视频
                , done: function (res) {
                    console.log(res)
                }
            });
            upload.render({
                elem: '#test6'
                , url: '/upload/'
                , accept: 'audio' //音频
                , done: function (res) {
                    console.log(res)
                }
            });

            //设定文件大小限制
            upload.render({
                elem: '#test7'
                , url: '/upload/'
                , size: 60 //限制文件大小，单位 KB
                , done: function (res) {
                    console.log(res)
                }
            });

            //同时绑定多个元素，并将属性设定在元素上
            upload.render({
                elem: '.demoMore'
                , before: function () {
                    layer.tips('接口地址：' + this.url, this.item, { tips: 1 });
                }
                , done: function (res, index, upload) {
                    var item = this.item;
                    console.log(item); //获取当前触发上传的元素，layui 2.1.0 新增
                }
            })

            //选完文件后不自动上传
            upload.render({
                elem: '#test8'
                , url: '/upload/'
                , auto: false
                //,multiple: true
                , bindAction: '#test9'
                , done: function (res) {
                    console.log(res)
                }
            });

            //拖拽上传
            upload.render({
                elem: '#test10'
                , url: '/upload/'
                , done: function (res) {
                    console.log(res)
                }
            });

            //多文件列表示例
            var demoListView = $('#demoList')
                , uploadListIns = upload.render({
                    elem: '#testList'
                    , url: '/upload/'
                    , accept: 'file'
                    , multiple: true
                    , auto: false
                    , bindAction: '#testListAction'
                    , choose: function (obj) {
                        var files = this.files = obj.pushFile(); //将每次选择的文件追加到文件队列
                        //读取本地文件
                        obj.preview(function (index, file, result) {
                            var tr = $(['<tr id="upload-' + index + '">'
                                , '<td>' + file.name + '</td>'
                                , '<td>' + (file.size / 1014).toFixed(1) + 'kb</td>'
                                , '<td>等待上传</td>'
                                , '<td>'
                                , '<button class="layui-btn layui-btn-xs demo-reload layui-hide">重传</button>'
                                , '<button class="layui-btn layui-btn-xs layui-btn-danger demo-delete">删除</button>'
                                , '</td>'
                                , '</tr>'].join(''));

                            //单个重传
                            tr.find('.demo-reload').on('click', function () {
                                obj.upload(index, file);
                            });

                            //删除
                            tr.find('.demo-delete').on('click', function () {
                                delete files[index]; //删除对应的文件
                                tr.remove();
                                uploadListIns.config.elem.next()[0].value = ''; //清空 input file 值，以免删除后出现同名文件不可选
                            });

                            demoListView.append(tr);
                        });
                    }
                    , done: function (res, index, upload) {
                        if (res.code == 0) { //上传成功
                            var tr = demoListView.find('tr#upload-' + index)
                                , tds = tr.children();
                            tds.eq(2).html('<span style="color: #5FB878;">上传成功</span>');
                            tds.eq(3).html(''); //清空操作
                            return delete this.files[index]; //删除文件队列已经上传成功的文件
                        }
                        this.error(index, upload);
                    }
                    , error: function (index, upload) {
                        var tr = demoListView.find('tr#upload-' + index)
                            , tds = tr.children();
                        tds.eq(2).html('<span style="color: #FF5722;">上传失败</span>');
                        tds.eq(3).find('.demo-reload').removeClass('layui-hide'); //显示重传
                    }
                });

            //绑定原始文件域
            upload.render({
                elem: '#test20'
                , url: '/upload/'
                , done: function (res) {
                    console.log(res)
                }
            });

        });
    </script>

}



